'\" t
.\" Manual page created with latex2man on Tue Mar 13 15:04:24 MDT 2018
.\" NOTE: This file is generated, DO NOT EDIT.
.de Vb
.ft CW
.nf
..
.de Ve
.ft R

.fi
..
.TH "icetGet" "3" "February 10, 2015" "\fBIceT \fPReference" "\fBIceT \fPReference"
.SH NAME

\fBicetGet \-\- get an \fBIceT \fPstate parameter\fP
.PP
.SH Synopsis

.PP
#include <IceT.h>
.PP
.TS H
l l l .
void \fBicetGetDoublev\fP(	IceTEnum	\fIpname\fP,
	IceTDouble *	\fIparams\fP  );
.TE
.PP
.TS H
l l l .
void \fBicetGetFloatv\fP(	IceTEnum	\fIpname\fP,
	IceTFloat *	\fIparams\fP  );
.TE
.PP
.TS H
l l l .
void \fBicetGetIntegerv\fP(	IceTEnum	\fIpname\fP,
	IceTInt *	\fIparams\fP  );
.TE
.PP
.TS H
l l l .
void \fBicetGetBooleanv\fP(	IceTEnum	\fIpname\fP,
	IceTBoolean *	\fIparams\fP  );
.TE
.PP
.TS H
l l l .
void \fBicetGetEnumv\fP(	IceTEnum	\fIpname\fP,
	IceTEnum *	\fIparams\fP  );
.TE
.PP
.TS H
l l l .
void \fBicetGetBitFieldv\fP(	IceTEnum	\fIpname\fP,
	IceTBitField *	\fIparams\fP  );
.TE
.PP
.TS H
l l l .
void \fBicetGetPointerv\fP(	IceTEnum	\fIpname\fP,
	IceTVoid **	\fIparams\fP  );
.TE
.PP
.SH Description

.PP
Like \fbOpenGL \fP,the operation of \fBIceT \fPis defined by a large state machine.
Also like \fbOpenGL \fP,the state parameters can be retrieved through the
\fBicetGet\fP
functions. Each function takes a symbolic constant,
\fIpname\fP,
which identifies the state parameter to retrieve. They
also each take an array, \fIparams\fP,
which will be filled with the
values in \fIpname\fP\&.
It is the calling application\&'s responsibility
to ensure that \fIparams\fP
is big enough to hold all the data.
.PP
.SH State Parameters

.PP
The following list identifies valid values for \fIpname\fP
and a
description of the associated state parameter.
.PP
.TP
\fBICET_BACKGROUND_COLOR\fP
 The color that \fBIceT \fPis currently
assuming is the background color. It is an RGBA value that is stored
as four floating point values. This value is set either to the last
value passed to \fBicetDrawFrame\fP
or \fBicetCompositeImage\fP,
the \fbOpenGL \fPbackground color if \fBicetGLDrawFrame\fP
was called, or
to black for color blending. (The correct background color is restored
later.)
.TP
\fBICET_BACKGROUND_COLOR_WORD\fP
 The same as
\fBICET_BACKGROUND_COLOR\fP
except that each component is stored as
8\-bit RGBA values and packed in a 4\-byte integer. The idea is to
rapidly fill the background of color buffers.
.TP
\fBICET_BLEND_TIME\fP
 The total time, in seconds, spent in
performing color blending of images during the last call to
\fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP\&.
Stored as a double. An alias for this value
is \fBICET_COMPARE_TIME\fP\&.
.TP
\fBICET_BUFFER_READ_TIME\fP
 The total time, in seconds, spent
copying buffer data and reading from \fbOpenGL \fPbuffers during the last
call to \fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP\&.
Stored as a double.
.TP
\fBICET_BUFFER_WRITE_TIME\fP
 The total time, in seconds,
spent writing to \fbOpenGL \fPbuffers during the last call to
\fBicetGLDrawFrame\fP\&.
Always set to 0.0 after a call to
\fBicetDrawFrame\fP
or \fBicetCompositeImage\fP\&.
Stored as a
double.
.TP
\fBICET_BYTES_SENT\fP
 The total number of bytes sent by the
calling process for transferring image data during the last call to
\fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP\&.
Stored as an integer.
.TP
\fBICET_COLLECT_TIME\fP
 The total time spent in collecting
image fragments to display processes during the last call to
\fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP\&.
.TP
\fBICET_COLOR_FORMAT\fP
 The color format of images to be
created by the rendering subsystem and composited by \fBIceT \fP\&.Use
\fBicetSetColorFormat\fP
to set the color format. Use
\fBicetImageGetColorFormat\fP
to safely get the color format for a
particular image.
.TP
\fBICET_COMPARE_TIME\fP
 The total time, in seconds, spent in
performing Z comparisons of images during the last call to
\fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP\&.
Stored as a double. An alias for this value
is \fBICET_BLEND_TIME\fP\&.
.TP
\fBICET_COMPOSITE_MODE\fP
 The composite mode set by
\fBicetCompositeMode\fP\&.
A single entry stored as an
IceTEnum\&.
.TP
\fBICET_COMPOSITE_ORDER\fP
 The order in which images are to be
composited if \fBICET_ORDERED_COMPOSITE\fP
is enabled and the
current strategy supports ordered compositing. The parameter contains
\fBICET_NUM_PROCESSES\fP
entries. The value of this parameter is
set with \fBicetCompositeOrder\fP\&.
If the element of index i in
the array is set to j, then there are i images ``on top\&'' of the
image generated by process j\&.
.TP
\fBICET_COMPOSITE_TIME\fP
 The total time, in seconds, spent in
compositing during the last call to \fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or \fBicetGLDrawFrame\fP\&.
Equal to
$\fBICET_TOTAL_DRAW_TIME\fP
\- \fBICET_RENDER_TIME\fP
\-
\fBICET_BUFFER_READ_TIME\fP
\- \fBICET_BUFFER_WRITE_TIME\fP$.
Stored as a double.
.TP
\fBICET_COMPRESS_TIME\fP
 The total time, in seconds, spent in
compressing image data using active pixel encoding during the last call
to \fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP\&.
Stored as a double.
.TP
\fBICET_DATA_REPLICATION_GROUP\fP
 An array of process ids.
There are \fBICET_DATA_REPLICATION_GROUP_SIZE\fP
entries in the
array. \fBIceT \fPassumes that all processes in the list will create the
exact same image with their draw functions (set with
\fBicetDrawCallback\fP
or \fBicetGLDrawCallback\fP).
The local
process id (\fBICET_RANK\fP)
will be part of this list.
.TP
\fBICET_DATA_REPLICATION_GROUP_SIZE\fP
 The length of the
\fBICET_DATA_REPLICATION_GROUP\fP
array.
.TP
\fBICET_DEPTH_FORMAT\fP
 The depth format of images to be
created by the rendering subsystem and composited by \fBIceT \fP\&.Use
\fBicetSetDepthFormat\fP
to set the depth format. Use
\fBicetImageGetDepthFormat\fP
to safely get the depth format for a
particular image.
.TP
\fBICET_DIAGNOSTIC_LEVEL\fP
 The diagnostics flags set with
\fBicetDiagnostics\fP\&.
.TP
\fBICET_DISPLAY_NODES\fP
 An array of process ranks. The size
of the array is equal to the number of tiles
(\fBICET_NUM_TILES\fP).
The $i^{th}$ entry is the rank of
the process that is displaying the tile described by the
$i^{th}$ entry in \fBICET_TILE_VIEWPORTS\fP\&.
.TP
\fBICET_DRAW_FUNCTION\fP
 A pointer to the drawing callback
function, as set by \fBicetDrawCallback\fP\&.
.TP
\fBICET_FRAME_COUNT\fP
 The number of times
\fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP
has been called for the current context.
.TP
\fBICET_GEOMETRY_BOUNDS\fP
 An array of vertices whose convex
hull bounds the drawn geometry. Set with \fBicetBoundingVertices\fP
or \fBicetBoundingBox\fP\&.
Each vertex has three coordinates and are
tightly packed in the array. The size of the array is $3 *
\fBICET_NUM_BOUNDING_VERTS\fP$.
.TP
\fBICET_GLOBAL_VIEWPORT\fP
 Defines a viewport in an infinite
logical display that covers all tile viewports (listed in
\fBICET_TILE_VIEWPORTS\fP).
The viewport, like an \fbOpenGL \fPviewport,
is given as the integer four\-tuple $<x, y, width, height
>$.x and y are placed at the leftmost and lowest position
of all the tiles, and width and height are just big enough for the
viewport to cover all tiles.
.TP
\fBICET_INTERLACE_TIME\fP
 The total time, in seconds, spent in
copying pixels to interlace images for better load balancing during the
last call to \fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP\&.
Stored as a double.
.TP
\fBICET_MAGIC_K\fP
 The target k value used when compositing
with the radix\-k single image strategy.
.TP
\fBICET_MAX_IMAGE_SPLIT\fP
 The target number of maximum image
splits to be performed by compositing strategies.
.TP
\fBICET_NUM_BOUNDING_VERTS\fP
 The number of bounding vertices
listed in the \fBICET_GEOMETRY_BOUNDS\fP
parameter.
.TP
\fBICET_NUM_TILES\fP
 The number of tiles in the defined
display. Basically equal to the number of times \fBicetAddTile\fP
was called after the last \fBicetResetTiles\fP\&.
.TP
\fBICET_NUM_PROCESSES\fP
 The number of processes in the
parallel job as given by the \fBIceTCommunicator\fP
object associated
with the current context.
.TP
\fBICET_PHYSICAL_RENDER_HEIGHT\fP
 The height of the images
generated by the rendering system. This is set to the \fbOpenGL \fPviewport
height by \fBicetGLDrawFrame\fP
or otherwise by explicitly setting it
with \fBicetPhysicalRenderSize\fP
or otherwise implicitly to the
largest tile height specified with \fBicetAddTile\fP\&.
.TP
\fBICET_PHYSICAL_RENDER_WIDTH\fP
 The width of the images
generated by the rendering system. This is set to the \fbOpenGL \fPviewport
width by \fBicetGLDrawFrame\fP
or otherwise by explicitly setting it
with \fBicetPhysicalRenderSize\fP
or otherwise implicitly to the
largest tile width specified with \fBicetAddTile\fP\&.
.TP
\fBICET_PROCESS_ORDERS\fP
 Basically, the inverse of
\fBICET_COMPOSITE_ORDER\fP\&.
The parameter contains
\fBICET_NUM_PROCESSES\fP
entries. If the element of index i in
the array is set to j, then there are j images ``on top\&'' of the
image generated by process i\&.
.TP
\fBICET_RANK\fP
 The rank of the process as given by the
\fBIceTCommunicator\fP
object associated with the current context.
.TP
\fBICET_RENDER_TIME\fP
 The total time, in seconds, spent in
the drawing callback during the last call to \fBicetDrawFrame\fP
or
\fBicetGLDrawFrame\fP\&.
Always set to 0.0 after a call to
\fBicetCompositeImage\fP\&.
Stored as a double.
.TP
\fBICET_SINGLE_IMAGE_STRATEGY\fP
 The single image
sub\-strategy set with \fBicetSingleImageStrategy\fP\&.
Use
\fBicetGetSingleImageStrategyName\fP
to get a user\-readable name for
the single image strategy.
.TP
\fBICET_STRATEGY\fP
 The strategy set with
\fBicetStrategy\fP\&.
Use \fBicetGetStrategyName\fP
to get a
user\-readable name for the strategy.
.TP
\fBICET_STRATEGY_SUPPORTS_ORDERING\fP
 Is true if and only if
the current strategy supports ordered compositing.
.TP
\fBICET_TILE_DISPLAYED\fP
 The index of the tile the local
process is displaying. The index will correspond to the tile entry in
the \fBICET_DISPLAY_NODES\fP
and \fBICET_TILE_VIEWPORTS\fP
arrays. If set to $0 <= i < \fBICET_NUM_PROCESSES\fP$,
then the
$i^{th}$ entry of \fBICET_DISPLAY_NODES\fP
is equal to
\fBICET_RANK\fP\&.
If the local process is not displaying any tile,
then \fBICET_TILE_DISPLAYED\fP
is set to \-1\&.
.TP
\fBICET_TILE_MAX_HEIGHT\fP
 The maximum height of any tile.
.TP
\fBICET_TILE_MAX_WIDTH\fP
 The maximum width of any tile.
.TP
\fBICET_TILE_VIEWPORTS\fP
 A list of viewports in the logical
global display defining the tiles. Each viewport is the four\-tuple
$<x, y, width, height >$defining the position and
dimensions of a tile in pixels, much like a viewport is defined in
\fbOpenGL \fP\&.The size of the array is $4 * \fBICET_NUM_TILES\fP$.
The
viewports are listed in the same order as the tiles were defined with
\fBicetAddTile\fP\&.
.TP
\fBICET_TOTAL_DRAW_TIME\fP
 Time spent in the last call to
\fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP\&.
This includes all the time to render, read
back, compress, and composite images. Stored as a double.
.TP
\fBICET_VALID_PIXELS_NUM\fP
 In conjunction with
\fBICET_VALID_PIXELS_OFFSET\fP,
gives the range of valid pixels
for the last image returned from \fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or \fBicetGLDrawFrame\fP\&.
Given the
arrays of pixels returned with the \fBicetImageGetColor\fP
and
\fBicetImageGetDepth\fP
functions, the valid pixels start at the
pixel indexed by \fBICET_VALID_PIXELS_OFFSET\fP
and continue for
\fBICET_VALID_PIXELS_NUM\fP\&.
The tile to which these pixels
belong are captured in the \fBICET_VALID_PIXELS_TILE\fP
state
variable. If the last call to \fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or \fBicetGLDrawFrame\fP
did not return
pixels for the local process, \fBICET_VALID_PIXELS_NUM\fP
is set
to 0\&. This state variable is only useful when
\fBICET_COLLECT_IMAGES\fP
is off. If on, it can be assumed that
all display processes contain all pixels in the image
(\fBICET_VALID_PIXELS_NUM\fP
is the number of pixels in the
image), and all other processes have no pixel data.
.TP
\fBICET_VALID_PIXELS_OFFSET\fP
 In conjunction with
\fBICET_VALID_PIXELS_NUM\fP,
gives the range of valid pixels for
the last image returned from \fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or \fBicetGLDrawFrame\fP\&.
Given the
arrays of pixels returned with the \fBicetImageGetColor\fP
and
\fBicetImageGetDepth\fP
functions, the valid pixels start at the
pixel indexed by \fBICET_VALID_PIXELS_OFFSET\fP
and continue for
\fBICET_VALID_PIXELS_NUM\fP\&.
The tile to which these pixels
belong are captured in the \fBICET_VALID_PIXELS_TILE\fP
state
variable. This state variable is only useful when
\fBICET_COLLECT_IMAGES\fP
is off. If on, it can be assumed that
all display processes contain all pixels in the image
(\fBICET_VALID_PIXELS_OFFSET\fP
is 0), and all other processes
have no pixel data.
.TP
\fBICET_VALID_PIXELS_TILE\fP
 Gives the tile for which the
last image returned from \fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or \fBicetGLDrawFrame\fP
contains pixels.
Each process has its own value. If the last call to
\fBicetDrawFrame\fP,
\fBicetCompositeImage\fP,
or
\fBicetGLDrawFrame\fP
did not return pixels for the local process,
then this state variable is set to \-1\&. This state variable is only
useful when \fBICET_COLLECT_IMAGES\fP
is off. If on, it can be
assumed that all display processes have valid pixels for their
respective display tiles, and all other processes have no pixel data.
.PP
In addition, if you are using the \fbOpenGL \fPlayer (i.e., have called
\fBicetGLInitialize\fP),
these variables, defined in IceTGL.h,
are also available.
.PP
.TP
\fBICET_GL_DRAW_FUNCTION\fP
 A pointer to the \fbOpenGL \fPdrawing
callback function, as set by \fBicetGLDrawCallback\fP\&.
.TP
\fBICET_GL_READ_BUFFER\fP
 The \fbOpenGL \fPbuffer to read from
(and write to). Set with \fBicetGLSetReadBuffer\fP\&.
.PP
.SH Errors

.PP
.TP
\fBICET_BAD_CAST\fP
 The state parameter requested is of a
type that cannot be cast to the output type.
.TP
\fBICET_INVALID_ENUM\fP
 \fIpname\fP
is not a valid state
parameter.
.PP
.SH Warnings

.PP
None.
.PP
.SH Bugs

.PP
None known.
.PP
.SH Notes

.PP
Not every state variable is documented here. There is a set of
parameters used internally by \fBIceT \fPor are more appropriately retrieved
with other functions such as \fBicetIsEnabled\fP\&.
.PP
.SH Copyright

Copyright (C)2003 Sandia Corporation
.PP
Under the terms of Contract DE\-AC04\-94AL85000 with Sandia Corporation, the
U.S. Government retains certain rights in this software.
.PP
This source code is released under the New BSD License.
.PP
.SH See Also

.PP
\fIicetIsEnabled\fP(3),
\fIicetGetStrategyName\fP(3)
.PP
.\" NOTE: This file is generated, DO NOT EDIT.
