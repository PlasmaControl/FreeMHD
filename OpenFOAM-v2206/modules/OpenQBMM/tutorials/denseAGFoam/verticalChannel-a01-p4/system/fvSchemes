/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default     Euler;
}

gradSchemes
{
    default         faceLimited     leastSquares 1;
    grad(p)         leastSquares;
}

divSchemes
{
    default                         none;

    "div\(phi.*,alpha.*\)"          Gauss vanLeer;
    "div\(phir,alpha.*\)"           Gauss vanLeer;

    "div\(alphaRhoPhi.*,U.*\)"      Gauss limitedLinearV 1;
    "div\(phi.*,U.*\)"              Gauss limitedLinearV 1;

    "div\(alphaRhoPhi.*,(h|e).*\)"  Gauss limitedLinear 1;
    "div\(alphaRhoPhi.*,K.*\)"      Gauss limitedLinear 1;
    "div\(alphaPhi.*,p\)"           Gauss limitedLinear 1;

    "div\(alphaRhoPhi.*,Theta.*\)"  Gauss limitedLinear 1;
    "div\(alphaRhoPhi.*,Sigma.*\)"  Gauss limitedLinear 1;

    "div\(devRhoReff.*\)"           Gauss linear;
    "div\(Sigma.*\)"                Gauss linear;
    "div\(\(\(alpha.*rho.*\)*R.*\)\)"            Gauss linear;

    div(((alpha.gas*thermo:rho.gas)*R2)) Gauss linear;

    "div\(alphaRhoPhi.*,(k|epsilon).*\)"  Gauss limitedLinear 1;

    div((((alpha.gas*thermo:rho.gas)*nuEff.gas)*dev2(T(grad(U.gas))))) Gauss linear;

    div((((thermo:rho.particles*nut.particles)*dev2(T(grad(U.particles))))+(((thermo:rho.particles*lambda.particles)*div(phi.particles))*I)))  Gauss linear;
}

laplacianSchemes
{
    default     Gauss linear corrected;
    bounded     Gauss linear corrected;
}

interpolationSchemes
{
    default     linear;
    "interpolate(h2Fn.particles)" upwind phi.particles;
}

snGradSchemes
{
    default     corrected;
    bounded     corrected;
}

fluxRequired
{
    default     no;
    p;
    alpha.particles;
}

// ************************************************************************* //
