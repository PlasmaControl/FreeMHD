/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2011-2016 OpenFOAM Foundation
    Copyright (C) 2022 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::processorTopology

Description
    Determines/represents processor-processor connection.
    After instantiation contains the processor-processor connection table
    (globally synchronized on all processors).

Note
    A processorTopology is usually generated by using the \c New
    factory method, which has been wrapped into a separate header to
    minimize dependencies.

Warning
    Does not currently correctly support multiple processor
    patches connecting two processors.

SourceFiles
    processorTopologyNew.H

\*---------------------------------------------------------------------------*/

#ifndef Foam_processorTopology_H
#define Foam_processorTopology_H

#include "labelList.H"
#include "lduSchedule.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                      Class processorTopology Declaration
\*---------------------------------------------------------------------------*/

class processorTopology
{
    // Private Data

        //- The processor to processor connection (adjacency) table
        labelListList procNeighbours_;

        //- Order in which the patches should be initialised/evaluated
        //- corresponding to the schedule
        lduSchedule patchSchedule_;

        //- Local map from neighbour proc to patchi. Different per processor!
        //  -1 or patchi for connection to procID
        labelList procPatchMap_;


    // Private Member Functions

        //- From neighbour processor to index in our local boundary.
        //  Local information (so not same over all processors)
        ///const labelList& procPatchMap() const noexcept
        ///{
        ///    return procPatchMap_;
        ///}

        //- Which \em local boundary is attached to specified processor
        //  Local information (so not same over all processors)
        //  \return -1 if not currently connected to specified processor.
        label procToLocalPatch(const label proci) const
        {
            return
            (
                proci >= 0 && proci < procPatchMap_.size()
              ? procPatchMap_[proci]
              : static_cast<label>(-1)
            );
        }


public:

    // Generated Methods

        //- Default construct (empty)
        processorTopology() = default;

        //- Copy construct
        processorTopology(const processorTopology&) = default;

        //- Move construct
        processorTopology(processorTopology&&) = default;

        //- Copy assignment
        processorTopology& operator=(const processorTopology&) = default;

        //- Move assignment
        processorTopology& operator=(processorTopology&&) = default;


    // Static Functions

        //- Factory method to create topology, schedule and proc/patch maps.
        //  Scans the list of patches for processor connections corresponding
        //  to the ProcPatch type.
        template<class ProcPatch, class PatchListType>
        static processorTopology New
        (
            const PatchListType& patches,
            const label comm
        );


    // Member Functions

        //- The number of processors used by the topology
        label nProcs() const noexcept
        {
            return procNeighbours_.size();
        }

        //- The processor to processor connection topology
        //- (like an adjacency list). Globally synchronized information
        const labelListList& procNeighbours() const noexcept
        {
            return procNeighbours_;
        }

        //- Order in which the patches should be initialised/evaluated
        //- corresponding to the schedule
        const lduSchedule& patchSchedule() const noexcept
        {
            return patchSchedule_;
        }

        //- Which \em local boundary is attached to specified processor
        //  Local information (so not same over all processors)
        //  \return -1 if not currently connected to specified processor.
        label procPatchLookup(const label proci) const
        {
            return procToLocalPatch(proci);
        }
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
